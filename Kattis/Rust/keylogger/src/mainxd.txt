// https://open.kattis.com/problems/keylogger
// Rust
// Easy

use std::{collections::HashMap, io::stdin};

fn main() {
    let mut map: HashMap<&str, &str> = HashMap::new();
    let inputs = vec![
        ("clank", "a"),
        ("bong", "b"),
        ("click", "c"),
        ("tap", "d"),
        ("poing", "e"),
        ("clonk", "f"),
        ("clack", "g"),
        ("ping", "h"),
        ("tip", "i"),
        ("cloing", "j"),
        ("tic", "k"),
        ("cling", "l"),
        ("bing", "m"),
        ("pong", "n"),
        ("clang", "o"),
        ("pang", "p"),
        ("clong", "q"),
        ("tac", "r"),
        ("boing", "s"),
        ("boink", "t"),
        ("cloink", "u"),
        ("rattle", "v"),
        ("clock", "w"),
        ("toc", "x"),
        ("clink", "y"),
        ("tuc", "z"),
        ("whack", " "),
        ("bump", ""),
        ("pop", ""),
        ("dink", ""),
        ("thumb", ""),
    ];

    for input in inputs {
        map.insert(input.0, input.1);
    }

    let mut input: String = String::new();
    stdin().read_line(&mut input).unwrap();
    let click = input.trim().parse::<usize>().unwrap();
    let mut caps_lock = false;
    let mut shift_active = false;

    let mut result_scope: Vec<&str> = Vec::new();

    for _ in 0..click {
        let mut input: String = String::new();
        stdin().read_line(&mut input).unwrap();

        let value = map.get_key_value(&input.trim());
        match value {
            Some((x, y)) => match (*x, *y) {
                ("whack", "") => result_scope.push(" "),
                ("bump", "") => caps_lock = !caps_lock,
                ("pop", "") => {
                    if !result_scope.is_empty() {
                        result_scope.pop();
                    }
                }
                ("dink", "") => shift_active = true,
                ("thumb", "") => shift_active = false,
                _ => {
                    if (caps_lock && !shift_active) || (!caps_lock && shift_active) {
                        // let u = y.to_uppercase().to_string();
                        result_scope.push(y);
                    } else {
                        result_scope.push(x);
                    }
                }
            },
            None => continue,
        }
    }

    for x in result_scope {
        print!("{}", x);
    }
}

// let mut result: Vec<(String, String)> = inputs
// .clone()
// .into_iter()
// .filter(|(x, _)| x.eq(&input.trim()))
// .map(|(x, y)| {
//     if (caps_lock && !shift_active) || (!caps_lock && shift_active) {
//         return (x, y.to_uppercase());
//     }
//     return (x, y);
// })
// .collect();
// let temp = result.pop().unwrap();

// match (temp.0.as_str(), temp.1.as_str()) {
// ("whack", "") => result_scope.push(" ".to_string()),
// ("bump", "") => caps_lock = !caps_lock,
// ("pop", "") => {
//     if !result_scope.is_empty() {
//         result_scope.pop();
//     }
// }
// ("dink", "") => shift_active = true,
// ("thumb", "") => shift_active = false,
// _ => result_scope.push(temp.1),
// }
